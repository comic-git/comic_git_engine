name: Build Site

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

# Allow arbitrary inputs and secrets in this workflow, to be added as env vars to the Python script.
on:
  workflow_call:
    inputs:
      DEPLOY_TARGET:
        # `github-pages` or `neocities`
        required: false
        type: string
        default: github-pages
      OUTPUT_DIR:
        required: false
        type: string
      INPUTS:
        required: false
        type: string
      EXTRA_SUBMODULES:
        required: false
        type: string
    secrets:
      NEOCITIES_API_TOKEN:
        required: false
      SECRETS:
        required: false

jobs:
  check-parameters:
    runs-on: ubuntu-latest
    steps:
      - name: Validate DEPLOY_TARGET
        run: |
          if [[ "${{ inputs.DEPLOY_TARGET }}" != "github-pages" && "${{ inputs.DEPLOY_TARGET }}" != "neocities" ]]; then
            echo "DEPLOY_TARGET must be 'github-pages' or 'neocities'."
            exit 1
          fi

  build:
    needs: check-parameters
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.12]

    steps:
      - name: Checkout caller repo
        uses: actions/checkout@v4
        with:
          submodules: true

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Pull in comic_git_engine
        run: |
          ls
          if [ ! -d comic_git_engine/.git ]; then
            ENGINE_VERSION=$(sed -n 's/Engine version = \(.*\)/\1/p' your_content/comic_info.ini)
            echo "Engine version: $ENGINE_VERSION"
            git submodule add -b "$ENGINE_VERSION" -f https://github.com/comic-git/comic_git_engine
          fi
          git -C comic_git_engine branch --show-current
          git -C comic_git_engine rev-parse HEAD

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r comic_git_engine/scripts/requirements.txt
          python comic_git_engine/scripts/make_requirements_hooks_file.py
          pip install -r comic_git_engine/scripts/requirements_hooks.txt

      - name: Run python build script
        env:
          OUTPUT_DIR: ${{ inputs.OUTPUT_DIR }}
          INPUTS: ${{ inputs.INPUTS }}
          SECRETS: ${{ secrets.SECRETS }}
        run: |
          python comic_git_engine/scripts/build_site.py --delete-scheduled-posts
          python_exit_code=$?
          echo "python script exit code: $python_exit_code"
          if [ $python_exit_code -ne 0 ]; then
            exit $python_exit_code
          fi

      - name: Upload build artifact
        uses: actions/upload-artifact@v4
        with:
          name: site
          path: .

  deploy-github-pages:
    if: ${{ inputs.DEPLOY_TARGET == 'github-pages' }}
    needs: build
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    runs-on: ubuntu-latest

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: site
          path: .

      - name: Setup Pages
        uses: actions/configure-pages@v5

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ inputs.OUTPUT_DIR || '.' }}

      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4

  deploy-neocities:
    if: ${{ inputs.DEPLOY_TARGET == 'neocities' }}
    needs: build
    environment:
      name: neocities

    runs-on: ubuntu-latest

    steps:
      - name: Download build artifact
        uses: actions/download-artifact@v4
        with:
          name: site
          path: .

      - name: Deploy to neocities
        uses: bcomnes/deploy-to-neocities@v3
        with:
          api_key: ${{ secrets.NEOCITIES_API_TOKEN }}
          cleanup: false
          neocities_supporter: false # set this to true if you have a supporter account and want to bypass unsuported files filter.
          preview_before_deploy: true # print a deployment plan prior to waiting for files to upload.
          dist_dir: ${{ inputs.OUTPUT_DIR }}
