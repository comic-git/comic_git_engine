on:
  workflow_dispatch:
    inputs:
      version:
        description: 'New script version'
        required: true


jobs:
  update_version:
    runs-on: ubuntu-latest
    steps:
      - name: Load repository
        uses: actions/checkout@v2
      - name: Update version in build_site.py
        run: |
          sed -i 's/VERSION = ".*"/VERSION = "${{ github.event.inputs.version }}"/' scripts/build_site.py
          git config --local user.name "Github Action"
          git config --local user.email "action@github.com"
          git add --all
          git commit -m "Version ${{ github.event.inputs.version }}"
          git push
      - name: Update version branches and tags
        run: |
          VERSION=${{ github.event.inputs.version }}
          MAJOR=$(echo $VERSION | cut -d. -f1)
          MINOR=$(echo $VERSION | cut -d. -f2)
          MAJOR_TAG="v$MAJOR"
          MINOR_TAG="v$MAJOR.$MINOR"
          FULL_TAG="v$VERSION"

          # Create and reset branches
          git fetch --all
          git checkout -B latest origin/master
          git push -f origin latest

          git checkout -B "$MAJOR.$MINOR" origin/master
          git push -f origin "$MAJOR.$MINOR"

          git checkout -B $VERSION origin/master
          git push -f origin $VERSION

          # Delete existing tags if present
          git tag -d $MAJOR_TAG || true
          git tag -d $MINOR_TAG || true
          git tag -d $FULL_TAG || true
          git push --delete origin $MAJOR_TAG || true
          git push --delete origin $MINOR_TAG || true
          git push --delete origin $FULL_TAG || true

          # Create new tags
          git tag $MAJOR_TAG
          git tag $MINOR_TAG
          git tag $FULL_TAG
          git push --tags

  make_release:
    needs: update_version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - name: Get previous tag
        id: prev_tag
        run: |
          PREV_TAG=$(git tag --sort=-creatordate | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+$' | head -n 2 | tail -n 1)
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT
      - name: Get commits since previous tag
        id: changelog
        run: |
          PREV_TAG="${{ steps.prev_tag.outputs.prev_tag }}"
          NEW_TAG="v${{ github.event.inputs.version }}"
          if [ -z "$PREV_TAG" ]; then
            RANGE=""
          else
            RANGE="$PREV_TAG..HEAD"
          fi
          COMMITS=$(git log $RANGE --pretty=format:'* [%s](https://github.com/${{ github.repository }}/commit/%H)' --no-merges)
          echo "commits<<EOF" >> $GITHUB_OUTPUT
          echo "$COMMITS" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      - name: Create release notes
        id: notes
        run: |
          NEW_TAG="v${{ github.event.inputs.version }}"
          PREV_TAG="${{ steps.prev_tag.outputs.prev_tag }}"
          echo "## What's New" > release.md
          echo "" >> release.md
          echo "${{ steps.changelog.outputs.commits }}" >> release.md
          echo "" >> release.md
          echo "" >> release.md
          echo "**Full Changelog**: https://github.com/${{ github.repository }}/compare/$PREV_TAG...$NEW_TAG" >> release.md
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: v${{ github.event.inputs.version }}
          body_path: release.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
